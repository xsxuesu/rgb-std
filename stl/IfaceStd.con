@version(1)
@timestamp(1711405444)
interface NamedAsset
	global spec: RGBContract.AssetSpec
	global terms: RGBContract.AssetTerms

	genesis: abstract
		globals: spec, terms


@version(1)
@timestamp(1711405444)
interface RenameableAsset

	public updateRight: Rights

	genesis: override
		assigns: updateRight

	transition rename: required, final
		globals: spec
		assigns: updateRight(?)
		default: updateRight
		inputs: updateRight


@version(1)
@timestamp(1711405444)
interface FungibleAsset
	global issuedSupply: RGBContract.Amount

	owned assetOwner(*): Zk64

	error nonEqualAmounts
		"the sum of spent assets doesn't equal to the sum of assets in outputs"
	error supplyMismatch
		"supply specified as a global parameter doesn't match the issued supply allocated to the asset owners"

	genesis: override
		errors: insufficientReserves, invalidProof, supplyMismatch
		globals: issuedSupply
		assigns: assetOwner(*)

	transition transfer: required, default, abstract
		errors: nonEqualAmounts
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface FixedAsset

	owned assetOwner(+): Zk64

	genesis: override
		errors: insufficientReserves, invalidProof, supplyMismatch
		assigns: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface BurnableAsset
	global burnedSupply(*): RGBContract.Amount

	public burnRight(+): Rights

	error insufficientCoverage
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		assigns: burnRight(+)

	transition burn: required, final
		errors: insufficientCoverage, invalidProof, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(*)
		inputs: burnRight


@version(1)
@timestamp(1711405444)
interface InflatableAsset
	global issuedSupply(+): RGBContract.Amount

	public inflationAllowance(*): Zk64

	error issueExceedsAllowance
		"you try to issue more assets than allowed by the contract terms"

	genesis: override
		assigns: inflationAllowance(+)

	transition issue: required, abstract
		errors: issueExceedsAllowance, supplyMismatch
		globals: issuedSupply
		assigns: assetOwner(*), inflationAllowance(*)
		default: assetOwner
		inputs: inflationAllowance(+)


@version(1)
@timestamp(1711405444)
interface ReplaceableAsset
	global burnedSupply(*): RGBContract.Amount
	global replacedSupply(*): RGBContract.Amount

	public burnEpoch(+): Rights
	public burnRight(*): Rights

	error insufficientCoverage
		"the claimed amount of burned assets is not covered by the assets in the operation inputs"

	genesis: override
		assigns: burnEpoch

	transition burn: required, final
		errors: insufficientCoverage, invalidProof, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: burnedSupply
		assigns: burnRight(?)
		inputs: burnRight

	transition openEpoch: required, final
		assigns: burnEpoch(?), burnRight
		default: burnRight
		inputs: burnEpoch

	transition replace: required, final
		errors: insufficientCoverage, invalidProof, nonEqualAmounts, supplyMismatch
		meta: RGBContract.BurnMeta
		globals: replacedSupply
		assigns: assetOwner(*), burnRight(?)
		default: assetOwner
		inputs: burnRight


@version(1)
@timestamp(1711405444)
interface ReservableAsset

	error insufficientReserves
		"reserve is insufficient to cover the issued assets"
	error invalidProof
		"the provided proof is invalid"

	genesis: override
		errors: insufficientReserves, invalidProof
		meta: RGBContract.IssueMeta

	transition issue: override
		errors: insufficientReserves, invalidProof
		meta: RGBContract.IssueMeta
		default: assetOwner
		inputs: 


@version(1)
@timestamp(1711405444)
interface NonFungibleToken
	global attachmentTypes(*): RGB21.AttachmentType
	global tokens(*): RGB21.TokenData

	owned assetOwner(*): RGB21.Allocation

	error fractionOverflow
		"the amount of fractional token in outputs exceeds 1"
	error invalidAttachmentType
		"attachment has a type which is not allowed for the token"
	error nonEqualValues
		"the sum of spent token fractions doesn't equal to the sum of token fractions in outputs"
	error nonFractionalToken
		"attempt to transfer a fraction of non-fractionable token"

	genesis: override
		errors: fractionOverflow, invalidAttachmentType
		globals: attachmentTypes(*), tokens(*)
		assigns: assetOwner(*)

	transition transfer: required, default, final
		errors: fractionOverflow, nonEqualValues, nonFractionalToken
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface EngravableNft
	global engravings(*): RGB21.EngravingData

	error nonEngravableToken
		"attempt to engrave on a token which prohibit engraving"

	genesis: override

	transition engrave: required, final
		errors: fractionOverflow, nonEngravableToken, nonEqualValues, nonFractionalToken
		globals: engravings
		assigns: assetOwner(+)
		default: assetOwner
		inputs: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface UniqueNft
	global attachmentTypes: RGB21.AttachmentType
	global tokens: RGB21.TokenData

	owned assetOwner(+): RGB21.Allocation

	genesis: override
		globals: attachmentTypes, tokens
		assigns: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface LimitedNft
	global attachmentTypes(+): RGB21.AttachmentType
	global tokens(+): RGB21.TokenData

	owned assetOwner(+): RGB21.Allocation

	genesis: override
		globals: attachmentTypes(+), tokens(+)
		assigns: assetOwner(+)


@version(1)
@timestamp(1711405444)
interface IssuableNft

	public inflationAllowance(+): RGB21.ItemsCount

	error issueExceedsAllowance
		"you try to issue more assets than allowed by the contract terms"

	genesis: override
		assigns: inflationAllowance(+)

	transition issue: required, abstract
		errors: fractionOverflow, insufficientReserves, invalidAttachmentType, invalidProof, issueExceedsAllowance
		globals: attachmentTypes(*), tokens(*)
		assigns: assetOwner(*), inflationAllowance(*)
		default: assetOwner
		inputs: inflationAllowance(+)


